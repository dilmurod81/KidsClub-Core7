// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using KidsClub.EFCorePowerTool.Entities;

namespace KidsClub.EFCorePowerTool.Context
{
    public partial class KidsClubContext : DbContext
    {
        public KidsClubContext()
        {
        }

        public KidsClubContext(DbContextOptions<KidsClubContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AspNetRole> AspNetRole { get; set; }
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaim { get; set; }
        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<TblActivityInventory> TblActivityInventory { get; set; }
        public virtual DbSet<TblCategory> TblCategory { get; set; }
        public virtual DbSet<TblContent> TblContents { get; set; }
        public virtual DbSet<TblMembership> TblMembership { get; set; }
        public virtual DbSet<VwCategoryChild> VwCategoryChild { get; set; }
        public virtual DbSet<VwCategoryCount> VwCategoryCount { get; set; }
        public virtual DbSet<VwContentCategoryFeatures> VwContentCategoryFeatures { get; set; }
        public virtual DbSet<VwContentChildCountMurod> VwContentChildCountMurod { get; set; }
        public virtual DbSet<VwEventAttendance> VwEventAttendance { get; set; }
        public virtual DbSet<VwMessages> VwMessages { get; set; }
        public virtual DbSet<VwRoleUsers> VwRoleUsers { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetRole>(entity =>
            {
                entity.Property(e => e.ConcurrencyStamp).IsRequired();
            });

            modelBuilder.Entity<AspNetRoleClaim>(entity =>
            {
                entity.HasIndex(e => e.RoleId, "IX_AspNetRoleClaim_RoleId");

                entity.Property(e => e.RoleId).IsRequired();

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetRoleClaim)
                    .HasForeignKey(d => d.RoleId);
            });

            modelBuilder.Entity<AspNetRoleClaims>(entity =>
            {
                entity.HasIndex(e => e.RoleId, "IX_AspNetRoleClaims_RoleId");

                entity.Property(e => e.RoleId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetRoleClaims)
                    .HasForeignKey(d => d.RoleId);
            });

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedName] IS NOT NULL)");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(newid())")
                    .IsFixedLength();

                entity.Property(e => e.ConcurrencyStamp)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('RandomStuff')");

                entity.Property(e => e.DateEntered)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NormalizedName)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AspNetUserClaims>(entity =>
            {
                entity.HasIndex(e => e.UserId, "IX_AspNetUserClaims_UserId");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

                entity.HasIndex(e => e.UserId, "IX_AspNetUserLogins_UserId");

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.ProviderKey).HasMaxLength(128);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserRoles>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.RoleId, "IX_AspNetUserRoles_RoleId");

                entity.Property(e => e.RoleId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.Role)
                    .WithMany()
                    .HasForeignKey(d => d.RoleId);

                entity.HasOne(d => d.User)
                    .WithMany()
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserTokens>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

                entity.Property(e => e.UserId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.Name).HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserTokens)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.HasIndex(e => e.NormalizedEmail, "EmailIndex");

                entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedUserName] IS NOT NULL)");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(newid())")
                    .IsFixedLength();

                entity.Property(e => e.ConcurrencyStamp)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateEntered)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dob)
                    .HasColumnType("date")
                    .HasColumnName("DOB");

                entity.Property(e => e.Email)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LastName)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NormalizedEmail)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.NormalizedUserName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordHash)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Picture)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.SecurityStamp)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblCategory>(entity =>
            {
                entity.ToTable("tblCategory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateEntered)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.Picture)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_tblCategory_tblCategory");
            });

            modelBuilder.Entity<TblContent>(entity =>
            {
                entity.ToTable("tblContent");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.DateEntered)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateUpdated).HasColumnType("datetime");

                entity.Property(e => e.DiscountPrice).HasColumnType("money");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FromId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FromID")
                    .IsFixedLength();

                entity.Property(e => e.Icon)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasColumnName("isActive")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LongDescription)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.Picture)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ToId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ToID")
                    .IsFixedLength();

                entity.Property(e => e.Url)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("URL");

                entity.Property(e => e.Urlslug)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("URLSlug");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_tblContent_tblContent");
            });

            modelBuilder.Entity<TblMembership>(entity =>
            {
                entity.ToTable("tblMembership");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateEntered)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExpireDate).HasColumnType("date");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MemberName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MembershipType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Rank)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.UserId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UserID")
                    .IsFixedLength();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.TblMembership)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_tblMembership_AspNetUsers");
            });

            modelBuilder.Entity<VwCategoryChild>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCategoryChild");

                entity.Property(e => e.ChildId).HasColumnName("ChildID");

                entity.Property(e => e.Expr1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCategoryCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCategoryCount");

                entity.Property(e => e.Count).HasColumnName("count");

                entity.Property(e => e.Expr3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Expr4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Expr5).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwContentCategoryFeatures>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwContentCategoryFeatures");

                entity.Property(e => e.CatName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChildId).HasColumnName("ChildID");

                entity.Property(e => e.CountParentId).HasColumnName("CountParentID");

                entity.Property(e => e.FromId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FromID")
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.Picture)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SubCatName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ToId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ToID")
                    .IsFixedLength();
            });

            modelBuilder.Entity<VwContentChildCountMurod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwContentChildCountMurod");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.CountParentId).HasColumnName("CountParentID");

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.DateUpdated).HasColumnType("datetime");

                entity.Property(e => e.DiscountPrice).HasColumnType("money");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FromId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FromID")
                    .IsFixedLength();

                entity.Property(e => e.Icon)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LongDescription)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.Picture)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ToId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ToID")
                    .IsFixedLength();

                entity.Property(e => e.Url)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("URL");
            });

            modelBuilder.Entity<VwEventAttendance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwEventAttendance");

                entity.Property(e => e.Arrived).HasColumnType("datetime");

                entity.Property(e => e.AttendanceId).HasColumnName("AttendanceID");

                entity.Property(e => e.Category)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.EventDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EventDetails)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.EventDiscountedPrice).HasColumnType("money");

                entity.Property(e => e.EventEnd).HasColumnType("datetime");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventLocation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EventPicture)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EventPrice).HasColumnType("money");

                entity.Property(e => e.EventStart).HasColumnType("datetime");

                entity.Property(e => e.EventTitle)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EventUrl)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("EventURL");

                entity.Property(e => e.FullName)
                    .HasMaxLength(51)
                    .IsUnicode(false);

                entity.Property(e => e.LeftAt).HasColumnType("datetime");

                entity.Property(e => e.Note)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Paid).HasColumnType("money");

                entity.Property(e => e.Picture)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwMessages>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwMessages");

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.FromId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("FromID")
                    .IsFixedLength();

                entity.Property(e => e.Message)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.Receiver)
                    .HasMaxLength(51)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiverId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ReceiverID");

                entity.Property(e => e.Sender)
                    .HasMaxLength(51)
                    .IsUnicode(false);

                entity.Property(e => e.SenderId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SenderID");

                entity.Property(e => e.ToId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ToID")
                    .IsFixedLength();
            });

            modelBuilder.Entity<VwRoleUsers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRoleUsers");

                entity.Property(e => e.Name)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}